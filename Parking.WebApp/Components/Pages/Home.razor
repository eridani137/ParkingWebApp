@page "/"
@using System.Data.Entity
@using Parking.WebApp.Data
@inject AppDbContext Context

<div class="page-wrapper">
    <div class="parking-container">
        <div class="row top-row">
            @for (var i = 0; i < 7; i++)
            {
                var spotIndex = i;
                <div class="parking-spot top" @onclick="@(() => OnSpotClick(spotIndex))">
                    <div class="circle @(_spots[spotIndex].IsOccupied ? "occupied" : "free")"></div>
                </div>
            }
        </div>

        <div class="road"></div>

        <div class="row bottom-row">
            @for (var i = 7; i < 14; i++)
            {
                var spotIndex = i;
                <div class="parking-spot bottom" @onclick="@(() => OnSpotClick(spotIndex))">
                    <div class="circle @(_spots[spotIndex].IsOccupied ? "occupied" : "free")"></div>
                </div>
            }
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(_message))
{
    <div class="message">@_message</div>
}

@code {

    class Spot
    {
        public bool IsOccupied { get; set; }
    }

    readonly List<Spot> _spots = [];
    string? _message;

    protected override void OnInitialized()
    {
        for (var i = 0; i < 14; i++)
        {
            _spots.Add(new Spot { IsOccupied = Random.Shared.NextDouble() < 0.2 });
        }
    }

    void OnSpotClick(int idx)
    {
        if (idx < 0 || idx >= _spots.Count) return;
        _message = _spots[idx].IsOccupied
            ? $"Место {idx + 1} занято"
            : $"Место {idx + 1} свободно";
        StateHasChanged();

        var entity = Context.Место
            .Include(c => c.ClientEntity)
            .FirstOrDefault(p => p.номер == idx + 1);
    }

}

<style>
    .page-wrapper {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: #424242;
    }

    .parking-container {
        background-color: #222;
        border: 4px solid #524f4f;
        padding: 35px;
        box-sizing: border-box;
    }

    .row {
        display: flex;
        gap: 20px;
        justify-content: center;
    }

    .parking-spot {
        width: 80px;
        height: 160px;
        background-color: #1f1f1f;
        border-left: 5px solid #555;
        border-right: 5px solid #555;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    .parking-spot.top {
        border-top: 5px solid #555;
        border-bottom: none;
    }

    .parking-spot.bottom {
        border-bottom: 5px solid #555;
        border-top: none;
    }

    .parking-spot:hover {
        background-color: #333;
    }

    .road {
        height: 80px;
        width: calc(7 * 80px + 6 * 20px);
        border-top: 5px dashed #888;
        border-bottom: 5px dashed #888;
        background-color: #2a2a2a;
        pointer-events: none;
    }

    .circle {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        pointer-events: none;
    }

    .free {
        background-color: green;
    }

    .occupied {
        background-color: brown;
    }

    .message {
        margin-top: 25px;
        font-size: 1.5rem;
        color: #eee;
        text-align: center;
        position: fixed;
        left: 50%;
        transform: translateX(-50%);
    }
</style>