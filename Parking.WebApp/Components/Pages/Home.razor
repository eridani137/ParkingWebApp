@page "/"
@using Parking.WebApp.Data.Entities
@using Parking.WebApp.Services
@inject ParkingService ParkingService
@implements IDisposable

<div class="page-wrapper">
    @if (!_isLoaded)
    {
        <p>Загрузка...</p>
    }
    else
    {
        <div class="main-layout">
            <div class="parking-container">
                <div class="row top-row">
                    @for (var i = 0; i < 7; i++)
                    {
                        var spotIndex = i;
                        var isSelectedClientSpot = _selectedClient != null && ParkingService.Spots[spotIndex].номер_клиента == _selectedClient.телефон;
                        var isFreeSpotBlinking = _isSelectingSpot && ParkingService.Spots[spotIndex].номер_клиента == null;
                        <div class="parking-spot top" @onclick="@(() => HandleSpotClick(spotIndex))">
                            <div
                                class="circle @(ParkingService.Spots[spotIndex].номер_клиента is not null ? "occupied" : "free") @(isSelectedClientSpot ? "blinking" : "") @(isFreeSpotBlinking ? "free-blinking" : "")"></div>
                        </div>
                    }
                </div>

                <div class="road"></div>

                <div class="row bottom-row">
                    @for (var i = 7; i < 14; i++)
                    {
                        var spotIndex = i;
                        var isSelectedClientSpot = _selectedClient != null && ParkingService.Spots[spotIndex].номер_клиента == _selectedClient.телефон;
                        var isFreeSpotBlinking = _isSelectingSpot && ParkingService.Spots[spotIndex].номер_клиента == null;
                        <div class="parking-spot bottom" @onclick="@(() => HandleSpotClick(spotIndex))">
                            <div
                                class="circle @(ParkingService.Spots[spotIndex].номер_клиента is not null ? "occupied" : "free") @(isSelectedClientSpot ? "blinking" : "") @(isFreeSpotBlinking ? "free-blinking" : "")"></div>
                        </div>
                    }
                </div>
            </div>
            <div class="clients-panel">
                <h3>Клиенты</h3>
                <div class="clients-list">
                    @foreach (var client in ParkingService.Clients)
                    {
                        <div class="client-item @(_selectedClient?.телефон == client.телефон ? "selected" : "")"
                             @onclick="() => SelectClient(client)">
                            <span>@client.имя (@client.телефон)</span>
                        </div>
                    }
                </div>

                @if (_selectedClient != null)
                {
                    <div class="action-section">
                        @if (IsClientParked(_selectedClient))
                        {
                            <button class="action-button free-button" @onclick="FreeClientParking">
                                Освободить место
                            </button>
                        }
                        else
                        {
                            <button class="action-button take-button" @onclick="StartTakingSpot">
                                Занять место
                            </button>
                        }
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {

    private ClientEntity? _selectedClient;
    private bool _isSelectingSpot;
    private bool _isLoaded;

    protected override async Task OnInitializedAsync()
    {
        ParkingService.OnChange += Refresh;
        await ParkingService.EnsureInitializedAsync();
        _isLoaded = true;
        StateHasChanged();
    }

    private void Refresh()
    {
        _selectedClient = null;
        _isSelectingSpot = false;

        InvokeAsync(StateHasChanged);
    }

    private void SelectClient(ClientEntity client)
    {
        _selectedClient = client;
        _isSelectingSpot = false;
    }

    private bool IsClientParked(ClientEntity client)
    {
        return ParkingService.Spots.Any(spot => spot.номер_клиента == client.телефон);
    }

    private void StartTakingSpot()
    {
        _isSelectingSpot = true;
    }

    private async Task HandleSpotClick(int spotIndex)
    {
        if (!_isSelectingSpot || _selectedClient == null)
        {
            var spot = ParkingService.Spots.ElementAtOrDefault(spotIndex);
            _selectedClient = spot?.номер_клиента is not null
                ? ParkingService.Clients.FirstOrDefault(c => c.телефон == spot.номер_клиента)
                : null;
            return;
        }

        if (ParkingService.Spots[spotIndex].номер_клиента != null) return;

        await ParkingService.TakeSpot(spotIndex, _selectedClient);
        _isSelectingSpot = false;
    }

    private async Task FreeClientParking()
    {
        if (_selectedClient == null) return;
        var spot = ParkingService.Spots.FirstOrDefault(s => s.номер_клиента == _selectedClient.телефон);
        if (spot == null) return;

        await ParkingService.FreeSpot(spot.номер);
    }

    public void Dispose()
    {
        ParkingService.OnChange -= Refresh;
    }

}

<style>

    .main-layout {
        display: flex;
        flex-direction: row;
        gap: 40px;
        align-items: flex-start;
    }

    .page-wrapper {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: #424242;
    }

    .parking-container {
        background-color: #222;
        border: 4px solid #524f4f;
        padding: 35px;
        box-sizing: border-box;
    }

    .row {
        display: flex;
        gap: 20px;
        justify-content: center;
    }

    .parking-spot {
        width: 80px;
        height: 160px;
        background-color: #1f1f1f;
        border-left: 5px solid #555;
        border-right: 5px solid #555;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    .parking-spot.top {
        border-top: 5px solid #555;
        border-bottom: none;
    }

    .parking-spot.bottom {
        border-bottom: 5px solid #555;
        border-top: none;
    }

    .parking-spot:hover {
        background-color: #333;
    }

    .road {
        height: 80px;
        width: calc(7 * 80px + 6 * 20px);
        border-top: 5px dashed #888;
        border-bottom: 5px dashed #888;
        background-color: #2a2a2a;
        pointer-events: none;
    }

    .circle {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        pointer-events: none;
    }

    .free {
        background-color: green;
    }

    .occupied {
        background-color: brown;
    }

    .message {
        margin-top: 25px;
        font-size: 1.5rem;
        color: #eee;
        text-align: center;
        position: fixed;
        left: 50%;
        transform: translateX(-50%);
    }

    .clients-panel {
        width: 350px;
        height: 477px;
        background-color: #1a1a1a;
        padding: 20px;
        border: 3px solid #666;
        border-radius: 10px;
        color: #eee;
        font-size: 1rem;
        text-align: center;
        scroll-behavior: smooth;
    }

    .clients-list {
        max-height: 300px;
        overflow-y: auto;
        margin-bottom: 20px;
    }

    .client-item {
        padding: 12px 15px;
        margin-bottom: 8px;
        background-color: #2a2a2a;
        border: 2px solid #444;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s ease;
        text-align: left;
    }

    .client-item:hover {
        background-color: #333;
        border-color: #555;
    }

    .client-item.selected {
        background-color: rgba(106, 141, 121, 0.9);
        border-color: rgba(118, 175, 141, 0.9);
        color: white;
    }

    .client-item.selected:hover {
        background-color: rgba(129, 169, 146, 0.9);
        border-color: rgba(118, 175, 141, 0.9);
    }

    .action-section {
        margin-top: 15px;
        padding-top: 15px;
        border-top: 2px solid #444;
    }

    .action-button {
        width: 100%;
        padding: 12px 20px;
        border: none;
        border-radius: 6px;
        font-size: 1rem;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .free-button {
        background-color: #dc3545;
        color: white;
    }

    .free-button:hover {
        background-color: #c82333;
        transform: translateY(-1px);
    }

    .take-button {
        background-color: #28a745;
        color: white;
    }

    .take-button:hover {
        background-color: #218838;
        transform: translateY(-1px);
    }

    .action-message {
        padding: 12px 20px;
        background-color: #2a2a2a;
        border: 2px solid #444;
        border-radius: 6px;
        color: #ccc;
        font-style: italic;
    }

    .selected-client {
        margin-top: 20px;
        font-size: 1.1rem;
        text-align: left;
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .selected-client .row {
        display: grid;
        grid-template-columns: 1fr;
        gap: 10px;
        justify-content: center;
        text-align: center;
    }

    .blinking-spot {
        animation: blink 1s infinite;
        font-weight: bold;
        font-size: 1.3rem;
        color: #e0cc72;
    }

    .blinking {
        animation: smooth-blink 2s ease-in-out infinite;
    }

    .free-blinking {
        animation: free-spot-blink 1.5s ease-in-out infinite;
    }

    @@keyframes blink {
        0%, 50% {
            opacity: 1;
        }
        51%, 100% {
            opacity: 0.3;
        }
    }

    @@keyframes smooth-blink {
        0%, 100% {
            opacity: 1;
            transform: scale(1);
            background-color: brown;
        }
        50% {
            opacity: 0.8;
            transform: scale(1.1);
            background-color: #e0cc72;
        }
    }

    @@keyframes free-spot-blink {
        0%, 100% {
            opacity: 1;
            transform: scale(1);
            background-color: green;
        }
        50% {
            opacity: 0.7;
            transform: scale(1.15);
            background-color: #32cd32;
        }
    }

</style>