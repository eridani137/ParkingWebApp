@page "/"
@using Parking.WebApp.Data.Entities
@using Parking.WebApp.Services
@inject ParkingService ParkingService
@implements IDisposable

<div class="page-wrapper">
    <div class="main-layout">
        <div class="parking-container">
            <div class="row top-row">
                @for (var i = 0; i < 7; i++)
                {
                    var spotIndex = i;
                    var isSelectedClientSpot = _selectedClient != null && ParkingService.Spots[spotIndex].номер_клиента == _selectedClient.телефон;
                    <div class="parking-spot top" @onclick="@(() => ParkingService.ToggleSpot(spotIndex))">
                        <div
                            class="circle @(ParkingService.Spots[spotIndex].номер_клиента is not null ? "occupied" : "free") @(isSelectedClientSpot ? "blinking" : "")"></div>
                    </div>
                }
            </div>

            <div class="road"></div>

            <div class="row bottom-row">
                @for (var i = 7; i < 14; i++)
                {
                    var spotIndex = i;
                    var isSelectedClientSpot = _selectedClient != null && ParkingService.Spots[spotIndex].номер_клиента == _selectedClient.телефон;
                    <div class="parking-spot bottom" @onclick="@(() => ParkingService.ToggleSpot(spotIndex))">
                        <div
                            class="circle @(ParkingService.Spots[spotIndex].номер_клиента is not null ? "occupied" : "free") @(isSelectedClientSpot ? "blinking" : "")"></div>
                    </div>
                }
            </div>
        </div>
        <div class="clients-panel">
            <h3>Клиенты</h3>
            <div class="clients-list">
                @foreach (var client in ParkingService.Clients)
                {
                    <div class="client-item @(_selectedClient?.телефон == client.телефон ? "selected" : "")"
                         @onclick="() => SelectClient(client)">
                        <span>@client.имя (@client.телефон)</span>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {

    private ClientEntity? _selectedClient;

    protected override void OnInitialized()
    {
        ParkingService.OnChange += Refresh;
    }

    private void Refresh()
    {
        InvokeAsync(StateHasChanged);
    }

    private void SelectClient(ClientEntity client)
    {
        _selectedClient = client;
    }

    public void Dispose()
    {
        ParkingService.OnChange -= Refresh;
    }

}

<style>

    .main-layout {
        display: flex;
        flex-direction: row;
        gap: 40px;
        align-items: flex-start;
    }

    .page-wrapper {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: #424242;
    }

    .parking-container {
        background-color: #222;
        border: 4px solid #524f4f;
        padding: 35px;
        box-sizing: border-box;
    }

    .row {
        display: flex;
        gap: 20px;
        justify-content: center;
    }

    .parking-spot {
        width: 80px;
        height: 160px;
        background-color: #1f1f1f;
        border-left: 5px solid #555;
        border-right: 5px solid #555;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    .parking-spot.top {
        border-top: 5px solid #555;
        border-bottom: none;
    }

    .parking-spot.bottom {
        border-bottom: 5px solid #555;
        border-top: none;
    }

    .parking-spot:hover {
        background-color: #333;
    }

    .road {
        height: 80px;
        width: calc(7 * 80px + 6 * 20px);
        border-top: 5px dashed #888;
        border-bottom: 5px dashed #888;
        background-color: #2a2a2a;
        pointer-events: none;
    }

    .circle {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        pointer-events: none;
    }

    .free {
        background-color: green;
    }

    .occupied {
        background-color: brown;
    }

    .message {
        margin-top: 25px;
        font-size: 1.5rem;
        color: #eee;
        text-align: center;
        position: fixed;
        left: 50%;
        transform: translateX(-50%);
    }

    .clients-panel {
        width: 350px;
        height: 477px;
        background-color: #1a1a1a;
        padding: 20px;
        border: 3px solid #666;
        border-radius: 10px;
        color: #eee;
        font-size: 1rem;
        text-align: center;
        scroll-behavior: smooth;
    }

    .clients-list {
        max-height: 300px;
        overflow-y: auto;
        margin-bottom: 20px;
    }

    .client-item {
        padding: 12px 15px;
        margin-bottom: 8px;
        background-color: #2a2a2a;
        border: 2px solid #444;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s ease;
        text-align: left;
    }

    .client-item:hover {
        background-color: #333;
        border-color: #555;
    }

    .client-item.selected {
        background-color: rgba(106, 141, 121, 0.9);
        border-color: rgba(118, 175, 141, 0.9);
        color: white;
    }

    .client-item.selected:hover {
        background-color: rgba(129, 169, 146, 0.9);
        border-color: rgba(118, 175, 141, 0.9);
    }

    .selected-client {
        margin-top: 20px;
        font-size: 1.1rem;
        text-align: left;
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .selected-client .row {
        display: grid;
        grid-template-columns: 1fr;
        gap: 10px;
        justify-content: center;
        text-align: center;
    }

    .blinking-spot {
        animation: blink 1s infinite;
        font-weight: bold;
        font-size: 1.3rem;
        color: #e0cc72;
    }

    .blinking {
        animation: smooth-blink 2s ease-in-out infinite;
    }

    @@keyframes blink {
        0%, 50% {
            opacity: 1;
        }
        51%, 100% {
            opacity: 0.3;
        }
    }

    @@keyframes smooth-blink {
        0%, 100% {
            opacity: 1;
            transform: scale(1);
            background-color: brown;
        }
        50% {
            opacity: 0.8;
            transform: scale(1.1);
            background-color: #e0cc72;
        }
    }

</style>